AI Voice Conversational Backend - Technical Documentation
=====================================================

Overview
--------
This is a Flask-based backend service that provides real-time voice conversation capabilities with AI processing. The system supports both English and Hindi languages, featuring speech-to-text, AI processing, and text-to-speech functionalities.

Core Components
--------------
1. Flask Web Server
   - RESTful API endpoints for voice processing
   - CORS enabled for cross-origin requests
   - Debug mode enabled for development

2. Audio Processing
   - Speech Recognition using Google's Speech Recognition API
   - Text-to-Speech using A4F Local
   - Audio file handling with ffmpeg
   - Support for WAV and MP3 formats

3. AI Processing
   - Groq AI integration for natural language processing
   - Bilingual support (English and Hindi)
   - Context-aware conversations
   - Temperature: 0.7 for balanced creativity

4. Session Management
   - Session-based conversation tracking
   - Automatic session cleanup after 1 hour
   - Message history storage
   - Audio file management

Technical Specifications
----------------------
1. Dependencies:
   - Flask 2.3.3: Web framework
   - Flask-CORS 4.0.0: Cross-origin resource sharing
   - Groq 0.4.1: AI language model
   - A4F-local: Text-to-speech engine
   - SpeechRecognition 3.10.0: Voice recognition
   - PyDub 0.25.1: Audio processing
   - Pygame 2.5.2: Audio playback
   - PyAudio 0.2.13: Audio input/output

2. System Requirements:
   - Python 3.x
   - ffmpeg installed and in PATH
   - Internet connection for speech recognition
   - Sufficient disk space for temporary audio files

API Endpoints
------------
1. /health
   - Method: GET
   - Purpose: Health check endpoint
   - Response: Server status and timestamp

2. /start_session
   - Method: POST
   - Purpose: Initialize new conversation session
   - Response: Session ID and status

3. /transcribe
   - Method: POST
   - Purpose: Convert audio to text
   - Input: Audio file
   - Response: Transcribed text and language

4. /process_text
   - Method: POST
   - Purpose: Process text with AI
   - Input: Text content
   - Response: AI response and audio file

5. /get_audio/<session_id>/<message_index>
   - Method: GET
   - Purpose: Retrieve audio response
   - Response: Audio file

6. /conversation_history
   - Method: GET
   - Purpose: Get conversation history
   - Response: List of messages

7. /stop_listening
   - Method: POST
   - Purpose: Stop voice recording
   - Response: Processing status

8. /clear_session
   - Method: POST
   - Purpose: Clear current session
   - Response: Status message

9. /set_silence_threshold
   - Method: POST
   - Purpose: Set silence detection threshold
   - Input: Threshold value (0.5-10 seconds)

Key Features
-----------
1. Voice Processing:
   - Real-time speech recognition
   - Automatic language detection
   - Silence detection for natural conversation
   - Audio file format conversion

2. AI Integration:
   - Context-aware responses
   - Bilingual support
   - Natural conversation flow
   - Error handling and fallbacks

3. Session Management:
   - Automatic session cleanup
   - Resource management
   - Temporary file handling
   - Thread pool for concurrent operations

4. Error Handling:
   - Comprehensive error catching
   - Graceful degradation
   - User-friendly error messages
   - Resource cleanup on errors

Security Features
---------------
1. File Handling:
   - Secure temporary file creation
   - Automatic file cleanup
   - Permission error handling
   - File existence verification

2. Session Security:
   - Session timeout
   - Resource cleanup
   - Access control
   - Input validation

3. API Security:
   - CORS protection
   - Input sanitization
   - Error message sanitization
   - Rate limiting (to be implemented)

Performance Optimizations
-----------------------
1. Resource Management:
   - Thread pool for concurrent operations
   - Automatic cleanup of expired sessions
   - Efficient file handling
   - Memory management

2. Audio Processing:
   - Efficient audio format conversion
   - Temporary file cleanup
   - Stream-based processing
   - Buffer management

3. Session Handling:
   - Efficient session storage
   - Quick session lookup
   - Automatic resource cleanup
   - Memory-efficient message storage

Known Limitations
---------------
1. Audio Processing:
   - Requires ffmpeg installation
   - Limited to WAV and MP3 formats
   - Temporary file storage required
   - Internet dependency for speech recognition

2. AI Processing:
   - Requires Groq API key
   - Limited to English and Hindi
   - Response time depends on API
   - Token limits apply

3. System Requirements:
   - Python 3.x required
   - Sufficient disk space needed
   - Internet connection required
   - Audio device access needed

Future Improvements
-----------------
1. Planned Features:
   - Rate limiting implementation
   - Authentication system
   - Database integration
   - Caching system

2. Performance Enhancements:
   - Connection pooling
   - Response compression
   - Load balancing
   - Caching layer

3. Security Enhancements:
   - API key rotation
   - Request validation
   - Audit logging
   - Security headers

Maintenance Notes
---------------
1. Regular Tasks:
   - Monitor disk space
   - Check API key validity
   - Verify ffmpeg installation
   - Review error logs

2. Troubleshooting:
   - Check audio device access
   - Verify internet connection
   - Monitor API rate limits
   - Check file permissions

3. Updates:
   - Regular dependency updates
   - Security patches
   - Feature updates
   - Performance optimizations 